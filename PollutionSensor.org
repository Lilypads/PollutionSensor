# -*- line-spacing: 0.1; -*-
#+TITLE: Pollution Sensor
#+STARTUP: latexpreview
#+STARTUP: show2levels
#+INCLUDE: "~/.doom.d/orgReportHeader.org"
#+OPTIONS: H:3 d:nil tags:nil email:t toc:t broken-links:t ^:nil #\n:t

* Table Of Contents :TOC_2:
- [[#overview][Overview]]
  - [[#objectives][Objectives]]
  - [[#road-map-011][Road Map]]
  - [[#usage][Usage]]
  - [[#capabilities][Capabilities]]
  - [[#hardware-reference][Hardware Reference]]
-  [[#misc][Misc]]
  - [[#i2c-on-pi][I2C On Pi]]
  - [[#links][Links]]
  - [[#repo][Repo]]
- [[#hardware-design][Hardware Design]]
  - [[#hardware-overview][Hardware Overview]]
  - [[#pi-hat][Pi Hat]]
  - [[#raspberry-pi-4-details][Raspberry pi 4 details]]
  - [[#particle-sensor][Particle Sensor]]
  - [[#gps-module][GPS Module]]
  - [[#i2c-display][I2C Display]]
  - [[#storage-device][Storage Device]]
  - [[#battery][Battery]]
  - [[#hold-rotary-encoder][HOLD Rotary Encoder]]
- [[#software][Software]]
  - [[#softare-overview][Softare Overview]]
  - [[#usage-state-machine][Usage State Machine]]
  - [[#oled-display-libraries][Oled Display Libraries]]
  - [[#user-interface][User Interface]]
  - [[#particle-sensor-library][Particle Sensor Library]]
  - [[#gps-library][GPS Library]]
  - [[#menu-system][Menu System]]
  - [[#command-line-interface][Command Line Interface]]
  - [[#display][Display]]
  - [[#data-upload][Data Upload]]
  - [[#buttons][Buttons]]

* Overview
[[file:Figures/PollutionSensor_HighLevelDiagram.png]]
** Objectives
*** User Stories
** Road Map [0/11]
- [ ] Hardware setup
- [ ] Finalise Libraries
- [ ] WAN SSH Setup
- [ ] Define Interface
- [ ] UML Diagramming
- [ ] Continuous delivery/Integration (testing)
- [ ] Menu System
- [ ] Command-line Interface
- [ ] Hardware UI
- [ ] GPS Logging
- [ ] Data Upload
** Usage
*** States
- Off
- Initialising
- Acquiring
#+begin_src plantuml :file Figures/PollotionUsecaseDiagram.png
!theme cyborg-outline
[*] --> Initialisation
state Initialisation {
        [*] --> AcquireGps
        [*] --> test
        }
#+end_src

#+RESULTS:
[[file:Figures/PollotionUsecaseDiagram.png]]

** Capabilities
** Hardware Reference
*** I2C addresses

| Device          | Address (Hex) |
|-----------------+---------------|
| Particle Sensor |          0x69 |
| OLED screen     |          0x3c |

*** GPIO Button Pins
- when pushed the buttons effectively connect their corresponding pin to GND
- thus a transition from high to low is considered a button push  (so trigger interrupts on a falling clock edge)
- the pins need to be used with the internal 50k\Omega pull-up resistor enabled, otherwise the pin state will be undefined until the button is pushed
- for more details, circuit diagrams and why this choice was taken, see the hardware->PiHat section

| Button Name | GPIO Pin # |
|-------------+------------|
| Up          |         19 |
| Down        |         06 |
| Enter       |         26 |

*  Misc
** I2C On Pi
*** enable raspberry Pi i2c Interface
- Run the following Command:
#+begin_src bash
sudo rasp-config
#+end_src
- Select interface options
- Enable I2C kernel module
*** Look for I2C devices
#+begin_src bash
i2cdetect -y 1
#+end_src
** Links
** [[https://github.com/Lilypads/PollutionSensor][Repo]]
* Hardware Design
** Hardware Overview
:code:
#+Name: umlHardwareOverView
#+begin_src plantuml :file Figures/hardwareOverview.png
!theme plain
skinparam linetype ortho
allow_mixing
node "Rasberry Pi" {
        () [sdcardSlot]
        () [USB3]

    class MalePinHeader {
        I2C
        UART
        GPIO
        5v
        3.3v
        GND
            }

        sdcardSlot -[hidden]r- USB3
        USB3 -[hidden]r- MalePinHeader
            }

node "Pi GPIO Breakout Hat" {
    Class FemalePinHeader {
                ..Pins..
                I2C
                UART
                GPIO
                5v
                3.3v
                GND
                ..PlugType..
                femalePinHeader(2.54mm)
             }
    Class GPSPlug{
                ..Pins..
                +UARTRx
                +UARTTx
                +3.3V
                +GND
                ..PlugType..
                femalePinHeader(2.54mm)
        }
       Class Co2SensorPlug{
                ..Pins..
                +I2Csda
                +I2Cscl
                +5V
                +GND
                +Interrupt?
                ..PlugType..
                JST-XH (6Way)
        }
        Class OledPlug {
                ..Pins..
                +I2Csda
                +I2Cscl
                +3.3V
                +GND
                ..PlugType..
                femalePinHeader(2.54mm)
            }
        Frame "Buttons" {
                component ButtonUp
                component ButtonDown
                component ButtonEnter
                ButtonUp -[hidden]r- ButtonDown
                ButtonDown -[hidden]r- ButtonEnter
        }
        Buttons -d- FemalePinHeader : gpio
        Buttons -d- FemalePinHeader : 3.3V
        Buttons -d- FemalePinHeader : GND
        Co2SensorPlug -[bold]l> FemalePinHeader
        GPSPlug -[bold]l> FemalePinHeader
        OledPlug -[bold]l> FemalePinHeader
            }
FemalePinHeader <-> MalePinHeader
Frame "ExternalSensors" {
component GPS
component OLED
component Co2Sensor
        }

GPS <-[#blue,bold]u-> GPSPlug
OLED <-[#blue,bold]u-> OledPlug
Co2Sensor <-[#blue,bold]u-> Co2SensorPlug

Frame "OtherExternalHarware" {
component USBPowerBrick
component SDCard
        }
SDCard <-[#blue,bold]u-> sdcardSlot
USBPowerBrick <-[#blue,bold]u-> USB3
#+end_src

:end:
#+RESULTS: umlHardwareOverView
[[file:Figures/hardwareOverview.png]]

** Pi Hat
*** Overview
- Centralises the hardware interfaces into one place
- Plugs into Raspberry Pi's Pin Header
- includes buttons/ or rotary encoder
- Pin header (female) for display daughter board
- 4 way JST-XH plugs for particle sensor + GPS Module
*** Hardware Interfaces
**** TODO Particle Sensor
- 6 way JST-XS header
**** I2C Display
- 4 way female Pin Header (2.54mm Pin Pitch)
 [[file:Figures/FemalePinHeader.jpg]]

Pin Definition From the Front
  | GND | Vcc (3.3V) | SCK | SDA |
**** Push Buttons
- three total according to the following menu actions:
  + up
  + down
  + enter
**** Particle Sensor JST-XH 6 way I2C + Interrupt
**** TODO GPS UART Pin Header
*** Wiring
**** top view
[[file:Hardware/PiHat/PiHatVeroRouting_Top.png]]
**** bottom view
[[file:Hardware/PiHat/PiHatVeroRouting_Bottom.png]]
**** wire List

|   | wire# | len (holes) | len shield (mm) | len total (mm) | col schem    | col board | meaning    |
|---+-------+-------------+-----------------+----------------+--------------+-----------+------------|
| ! |       |   len_holes |          len_mm |     len_tot_mm |              |           |            |
| # |     1 |           4 |              10 |             20 | grey         | black     | GND        |
| # |     2 |           7 |              18 |             28 | grey         | black     | GND        |
| # |     3 |          10 |              25 |             35 | grey         | black     | GND        |
| # |     4 |           7 |              18 |             28 | grey         | black     | GND        |
| # |     5 |           4 |              10 |             20 | orange       | yellow    | 3.3V       |
| # |     6 |           6 |              15 |             25 | orange       | yellow    | 3.3V       |
| # |     7 |          18 |              46 |             56 | light Purple | white     | I2C_sda    |
| # |     8 |          16 |              41 |             51 | dark Purple  | red       | I2C_scl    |
| # |     9 |           7 |              18 |             28 | light pink   | blue      | UART_Rx_Pi |
| # |    10 |           7 |              18 |             28 | dark pink    | green     | UART_Tx_Pi |
| # |    11 |          12 |              30 |             40 | light pink   | blue      | UART_Rx_Pi |
| # |    12 |          12 |              30 |             40 | dark pink    | green     | UART_Tx_Pi |
    #+TBLFM: $4=$len_holes*2.54;%0.0f::$5=$len_mm+10

*** Buttons

**** push button Equivilent Circuit
[[file:Figures/6mmPushbutton.drawio.png]]

**** Low-pass RC Filter Design
[[file:Figures/switchWiring.png]]
- use a low pass filter RC filter with a time constant of \approx =2ms= to allow for responsiveness while filtering out bounce etc
- Aim for small capacitance values that I have on hand =1pF-100nF=
- Probably want to make this as big as possible so that we can pick an adequate pull-down resistor
- Internal pull-up is supposedly \approx =50k=
#+NAME: eqLpFilter
\begin{align}
\tau = RC\\
C = \tau/R
\end{align}
- using =50k= we get an capacitance of =40nF=
- I only have =47nF=
- so we get =2.35ms=
**** Pull down resistor

**** Wiring
** Raspberry pi 4 details
*** Processor
**** Pull-up/down Resistors
50K min – 65K max. Pull-down is 50K min – 60K max.
*** IP
| 192.168.1.228 |
*** Pi Header
[[file:Figures/Raspberry-Pi-GPIO-Header-with-Photo-702x336.png]]

** Particle Sensor
*** Hardware Overview
- ID :: SPS30
- Vendor :: Sensirion
- Interface :: I2C
- Plug :: JST XS 6 way
*** Hardware interface (JST-XS 5Way)

| Pin | Name | Description      | Comments            | Wire Color |
|-----+------+------------------+---------------------+------------|
|   1 | VDD  | Supply Voltage   | 5v \pm 10%          | Black      |
|   2 | SDA  | I^2C Serial Data | 5V-3.3V compatible  | Red        |
|   3 | SCL  | I^C Serial Clock | 5V-3.3V compatible  | White      |
|   4 | SEL  | Interface Select | Pull to GND for I^C | Yellow     |
|   5 | GND  | Ground           | Housing on GND      | Orange     |

[[file:./images/screenshot-01.png]]

*** [[file:Hardware/ParticleSensor/SENSIRION_datasheet.pdf][SPS30 Datasheet]]
*** I2C
| Address | 0x69 |
** GPS Module
*** picture
[[file:Figures/NEO-6M.png]]
*** Overview
- ID :: NEO-6M
- Vendor :: u-blox
- Interface :: UART
- Plug :: 2.54mm pin header
- Vcc Voltage :: 3.6V max
*** Hardware Interface Details
**** Breakout board
- [[https://uk.pi-supply.com/products/ublox-neo-6m-gps-uart-module-breakout-with-antenna][GPS breakout board]]
- 5 way Male Pin header
 From Front Pins at bottom
| Pin Name | Pin Description       |
|----------+-----------------------|
| Vcc 3.3V | Supply Voltage        |
| GND      | Ground                |
| TXD 3.3v | Transmit (Out of GPS) |
| RXD 3.3v | Receive (Into GPS)    |
| PPS      | Interrupt?            |
*** [[file:Hardware/GPSModule/NEO-6_DataSheet.pdf][NEO6 Datasheet]]
** I2C Display
[[file:Figures/OledDisplay.png]]
- 128\times64 Pixel Monochrome Oled
- I2C
*** I2C
| Address      |    0x3C |
| Interface IC | SSD1306 |

*** [[file:Resource/SSD1306.pdf][SSD1306 Datasheet]]

** TODO Storage Device
- Use onboard SD Card
** Battery
- Currently Just a USB Power Brick
** HOLD Rotary Encoder
* Software
** Softare Overview
#+begin_src plantuml :file Figures/softwareOverview.png
!theme plain
skinparam linetype ortho
allow_mixing
skinparam packageStyle frame
package UserInterface {
class Menu {
        ..Public Methods..
        +inputCode()
        ..Public Properties..
        +MenuIdx
        +ptrMenuItems
        +menuLength
        ..Private Methods..
        -menuIncrement()
        -menuDecrement()
        -menuEnter()
}

class inputHandler {
        ..Public Methods..
        ..Public Properties..
        ..Private Methods..
            }

class gpioHandler {
        ..Public Methods..
        ..Public Properties..
        ..Private Methods..
            }

class commandLineInterface {
        ..Public Methods..
        ..Public Properties..
        ..Private Methods..
            }
}

package SensorInterfaces {
class particleSensor{}
class gps {}
            }
package display {
class oled {}
            }
package dataProccesing{
class proccesData {
        +figure out later
        }
}

package DataStorage <<database>> {
class settings {
        ..Public Properties..
}
class bufferedData{}
}
package DataUpload {
class dataUploadStateMachine {}
}

gps -- proccesData: read gps data >
particleSensor -- proccesData: read particle data >
proccesData -- bufferedData: store buffered data >
inputHandler -> Menu :input code >
gpioHandler -> inputHandler :user input >
commandLineInterface -> inputHandler :user input >
commandLineInterface -> Menu :get menu info
Menu -- settings :save settings >
Menu -- display :update display >
#+end_src

#+RESULTS:
[[file:Figures/softwareOverview.png]]

** Usage State Machine
** Oled Display Libraries
*** candidates
- https://github.com/bitbank2/ss_oled
  + good feature-set
  + 128 stars on github
  + good documentation
  + Depends on BitBang_I2C library
  + last commit one month ago
- https://github.com/iliapenev/ssd1306_i2c
  + 33 stars
  + 22 forks - lots of forks for not very many stars
  + last commit 2016
** User Interface
*** Menu System
**** Menu State Machine
*** Configurable Options
*** Live Display
** TODO Particle Sensor Library
*** embedded-sps
- https://github.com/Sensirion/embedded-sps
- provided by sensirion themselves
- looks like it's a driver and not a library? plus, it's mainly in C
- This one is for i2c >> UART version also available at: https://github.com/Sensirion/embedded-uart-sps
  + 35 stars
  + last commit 14 months ago
*** sps30lib
- https://github.com/paulvha/sps30_on_raspberry
- Found its review at: https://kandi.openweaver.com/c++/paulvha/sps30_on_raspberry
- sps30 library for ESP32 and a couple of other boards of same author with 57 stars available at:https://github.com/paulvha/sps30
  + 8 stars
  + last commit 2 years ago
  + but, it has no issue reported -> might mean it is working consistently?
  + in-line-with-code documentations available
*** sps30
- https://os.mbed.com/users/ziqiyap/code/SPS30//file/f6b216228067/sps30.cpp/
  + 40 imports, 1 follower
  + last commit 3 years ago
  + in-line-with-code documentation available, API auto generated documentation available at: https://os.mbed.com/users/ziqiyap/code/SPS30/docs/tip/
**** searching reference link: https://github.com/topics/sps30
** TODO GPS Library
- UART
*** GPSD
- https://gpsd.gitlab.io/gpsd/index.html
- Service Daemon
- Doesn't explicitly say that NEO6M is supported but I saw forum users say it was
*** libgps
- https://github.com/wdalmut/libgps
  + 70 stars
  + C
  + in latitudes and logtitudes
  + last commit 8 years ago
- tested with Adafruit Ultimate GPS Breakout - 66 channel w/10 Hz updates - Version 3
*** ublox
- https://github.com/GAVLab/ublox
  + 41 stars
  + last commit 6 years ago
  + have GAVLab dependency
** TODO Menu System
** TODO Command Line Interface
** TODO Display
** TODO Data Upload
** Buttons
- pi gpio
